#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jan 13 10:37:11 2021

Class to read GMI simulations generated by ARTS
Can read in either one file or a list of files

@author: inderpreet
"""


import scipy.io
import numpy as np
import matplotlib.pyplot as plt
from iwc2tb.py_atmlab.apply_gaussfilter import apply_gaussfilter
import era2dardar.utils.get_dardar_inputfile as get_dardar
import shutil
import zipfile
from typhon.arts import xml
import xarray
from scipy import interpolate
import os
import glob
from iwc2tb.common.add_gaussian_noise import add_gaussian_noise

class GMI():
      
    
    def __init__(self, filenames):
        """
        Class to read GMI simulations generated by ARTS
        ----------
        filenames : string/list of strings containing the filename(s)

        Returns
        -------
        None.

        """
        self.nedt = np.array([0.70, 0.65, 0.47, 0.56 ])
        
        if np.isscalar(filenames):
#            print ('doing only one file')
            filenames = [filenames]
        self.files = filenames    
        self.mat = []
        for file in filenames:
            self.mat.append(scipy.io.loadmat(file))
            

    def get_inputfiles(self):
        
        inputfiles = []
        for file in self.files:
            zfile = file.replace(".mat", ".zip")
#           zfile = zfile.replace("GMI_m65", "DARDAR_ERA_m65")
            fname = os.path.basename(zfile)
            zfile = os.path.join("/home/inderpreet/Dendrite/Projects/IWP/GMI", "DARDAR_ERA_m65_p65_zfield", fname)

            inputfiles.append(zfile)
        return inputfiles    
      
    def get_lsm(self):  

        data = []
        inputfiles = self.get_inputfiles()        
        for i, infile in enumerate(inputfiles):

            with zipfile.ZipFile(infile, 'r') as zf:
                for file in zf.namelist():

                    if file.endswith("lsm.xml"):
                        zf.extract(file, "/home/inderpreet/data/temp")
                    if file.endswith("lat_grid.xml"):    
                        zf.extract(file, "/home/inderpreet/data/temp")

                #zip_ref.extractall("/home/inderpreet/data/temp")
                
                
            lsm0 = np.squeeze(xml.load("/home/inderpreet/data/temp/lsm.xml"))
            lat0 = np.squeeze(xml.load("/home/inderpreet/data/temp/lat_grid.xml"))
            
            for f in glob.glob("/home/inderpreet/data/temp/*.xml"):
                os.remove(f)
                
            mat = self.mat[i]
            stype = np.squeeze(mat["B"]["stype"][0,0])
            lat   = np.squeeze(mat["B"]["lat"][0, 0])

            f     = interpolate.interp1d(lat0, lsm0, kind = "nearest")

                    
            lsm   = f(lat)

            iland         = lsm > 0.5
            isea          = lsm <= 0.5
        
        
            lsm[iland]  = 1
            lsm[isea]   = 0            
               
            ix = (lsm == 0) & (stype == 2)              
            stype[ix] = 3

            data.append(stype)
                
            
 #            mat = self.mat[i]
 #            stype = np.squeeze(mat["B"]["stype"][0,0])
 #            lat   = np.squeeze(mat["B"]["lat"][0, 0])

 #            # reassign surface type to ice and snow
 #            iice = stype == 2
            
 #            f     = interpolate.interp1d(lat0, lsm0, kind = "nearest")

                    
 #            lsm   = f(lat[iice])

 #            iland         = lsm > 0.5
 #            isea          = lsm <= 0.5
        
        
 #            lsm[iland]  = 1
 #            lsm[isea]   = 0            
               
 #            ix = np.where(lsm == 0)[0] 
 # #           print (stype[iice].shape, ix.shape, np.sum(ix))     
            
 #            stype[iice][ix] = 3
            
 #            print(stype.max())

 #            data.append(stype)
            
            
        return data     
        
    def get_data(self, parameter):    
        """
        method to read in the data from *.mat file   
    
            Parameters
        ----------
        parameter : string containing name of the parameter to be extracted

        Returns
        -------
        data : np.array of requested data

        """
        
        if parameter not in ["Tb", "iwp", "lat", "lon", "pos" ,
                              "stype", "z0", "p0", "t0", "rwp", "wvp"]:
            raise ValueError("parameter should be one of [Tb, iwp, lat, lon, pos, stype, z0, p0, t0, rwp, wvp]")
            
        data = []    
        if parameter == "Tb":
            for i in range(len(self.mat)):
                mat = self.mat[i]
                tb_noise = add_gaussian_noise(mat["Tb"], self.nedt)
                data.append(tb_noise)
            return data
        elif parameter == "stype":
            return self.get_lsm()
        else:
            for i in range(len(self.mat)):
                mat = self.mat[i]
                data.append(mat["B"][parameter][0,0])
            return data
        
        
    def get_O(self, parameter):
        """
        method to read in ARTS setup inputs

        Parameters
        ----------
        parameter : string containing the name of the input to be extracted

        Raises
        ------
            valueError if the parameter is not in the list 
            
        Returns
        -------
        data : list of arrays containing the parameter desired

        """
        
        if parameter not in ["icehabit", "icepsd", "icesize", "rainpsd", "lsampling" ,
                              "pratio_csat", "pratio_gmi", "phase_tlim"]:
            raise (ValueError("parameter should be one of [icehabit, icepsd, icesize, rainpsd, lsampling, pratio_csat, pratio_gmi, phase_tlim]"),)
        data = []
        for i in range(len(self.mat)):
                mat = self.mat[i]
                data.append(mat["O"][parameter][0,0])
        return data                      
         
        

    
    @property
    def tb(self):
        """
        brightness temperatures

        Returns
        -------
        np.array of TB values

        """
        tb = self.get_data('Tb')
        tb = np.concatenate(tb, axis = 0)
        return np.squeeze(tb)
    
    @property
    def iwp(self):
        """
        ice water path

        Returns
        -------
        np.array of IWP values

        """
        
        iwp = self.get_data('iwp')
        iwp = np.concatenate(iwp, axis = 0)
        return iwp
    
    
    @property
    def wvp(self):
        """
        water vapour path

        Returns
        -------
        np.array of IWP values

        """
        
        wvp = self.get_data('wvp')
        wvp = np.concatenate(wvp, axis = 0)
        return wvp
    

    @property
    def lat(self):
        """
        latitudes

        Returns
        -------
        np.array of lat values

        """
        
        lat = self.get_data('lat')
        if len(lat)==1:
            return np.array(lat).ravel()
        else:
            return np.concatenate(lat, axis = 0)
        
    @property
    def lon(self):
        """
        latitudes

        Returns
        -------
        np.array of lat values

        """
        
        lon = self.get_data('lon')
        if len(lon)==1:
            return np.array(lon).ravel()
        else:
            return np.concatenate(lon, axis = 0)
        

          
    @property
    def stype(self):
        """
        latitudes

        Returns
        -------
        np.array of lat values

        """
        stype = self.get_lsm()
        if len(stype) == 1:
            return np.array(stype).ravel()
        else:
            return  np.concatenate(stype, axis = 0)  
    
    
    def pdf(self, bins = None, plot = True):
        """
        generates pdf of Tb from IceCube simulations

        These are not antenna weighted,
        Just to make a quick check.
        Parameters
        ----------
        bins : np.array, optional
            intervals over which PDF is to be computed. The default is None.
            When None, default bins used are np.arange(100, 300, 0.5)
        plot : boolean, optional
            if true, generates a plot of the PDF. The default is True.

        Returns
        -------
        hist[0] : np.array, The values of the histogram

        """
        
        tb = self.tb
        

        bins = np.arange(100, 310, 1)
        fig, ax = plt.subplots(1,1, figsize = [8, 8])
        
        for i in range(4):
        
            hist = np.histogram(tb[:, i], bins, density = True)
        
            if plot:
            

                ax.plot(bins[:-1], hist[0], label = i)
                ax.set_yscale('log')
                ax.set_ylabel('PDF [#/K]')
                ax.set_xlabel('TB [K]')
                ax.legend()
        return hist[0]
    



    
